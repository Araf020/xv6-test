diff --git a/Makefile b/Makefile
index 09d790c..a90f21d 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,7 +250,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c test.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/defs.h b/defs.h
index 82fb982..881c8d3 100644
--- a/defs.h
+++ b/defs.h
@@ -52,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
+int             createSwapFile(struct proc* p);
+int             readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size);
+int             writeToSwapFile(struct proc* p, char* buffer, uint placeOnFile, uint size);
+int             removeSwapFile(struct proc* p);
+
 
 // ide.c
 void            ideinit(void);
@@ -120,10 +125,16 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int  			isInit(struct proc* p);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
 
+// sysfile
+struct inode*   create(char *path, short type, short major, short minor);
+int             isdirempty(struct inode *dp);
+
+
 // spinlock.c
 void            acquire(struct spinlock*);
 void            getcallerpcs(void*, uint*);
@@ -186,5 +197,12 @@ void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
 
+int 			swapIn(struct proc* p, int cr2);
+void 			swapOut(struct proc *p, pde_t *pgdir, uint virtualAddress);
+void 			swapOutNFU(struct proc *p, pde_t *pgdir, uint virtualAddress);
+int 			PageWasSwapped(struct proc *p, int virtualAddress);
+void            updateCounters(struct proc* p);
+
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+#define NFUPageReplacementAlgo 1 //0 for fifo, 1 for NFU
\ No newline at end of file
diff --git a/elf.h b/elf.h
index d16c967..90ddbec 100644
--- a/elf.h
+++ b/elf.h
@@ -25,7 +25,7 @@ struct elfhdr {
 struct proghdr {
   uint type;
   uint off;
-  uint vaddr;
+  uint virtualAddress;
   uint paddr;
   uint filesz;
   uint memsz;
diff --git a/exec.c b/exec.c
index b40134f..6d8fea7 100644
--- a/exec.c
+++ b/exec.c
@@ -47,13 +47,13 @@ exec(char *path, char **argv)
       continue;
     if(ph.memsz < ph.filesz)
       goto bad;
-    if(ph.vaddr + ph.memsz < ph.vaddr)
+    if(ph.virtualAddress + ph.memsz < ph.virtualAddress)
       goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+    if((sz = allocuvm(pgdir, sz, ph.virtualAddress + ph.memsz)) == 0)
       goto bad;
-    if(ph.vaddr % PGSIZE != 0)
+    if(ph.virtualAddress % PGSIZE != 0)
       goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+    if(loaduvm(pgdir, (char*)ph.virtualAddress, ip, ph.off, ph.filesz) < 0)
       goto bad;
   }
   iunlockput(ip);
diff --git a/fs.c b/fs.c
index f77275f..4966e79 100644
--- a/fs.c
+++ b/fs.c
@@ -668,3 +668,144 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+// NEW FOR PAGING
+
+#include "fcntl.h"
+#define DIGITS 14
+
+char* itoa(int i, char b[]){
+    char const digit[] = "0123456789";
+    char* p = b;
+    if(i<0){
+        *p++ = '-';
+        i *= -1;
+    }
+    int shifter = i;
+    do{ //Move to where representation ends
+        ++p;
+        shifter = shifter/10;
+    }while(shifter);
+    *p = '\0';
+    do{ //Move back, inserting digits as u go
+        *--p = digit[i%10];
+        i = i/10;
+    }while(i);
+    return b;
+}
+
+//remove swap file of proc p;
+int
+removeSwapFile(struct proc* p)
+{
+	//path of proccess
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+	struct inode *ip, *dp;
+	struct dirent de;
+	char name[DIRSIZ];
+	uint off;
+
+	if(0 == p->swapFile)
+	{
+		return -1;
+	}
+	fileclose(p->swapFile);
+
+	begin_op();
+	if((dp = nameiparent(path, name)) == 0)
+	{
+		end_op();
+		return -1;
+	}
+
+	ilock(dp);
+
+	  // Cannot unlink "." or "..".
+	if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+	   goto bad;
+
+	if((ip = dirlookup(dp, name, &off)) == 0)
+		goto bad;
+	ilock(ip);
+
+	if(ip->nlink < 1)
+		panic("unlink: nlink < 1");
+	if(ip->type == T_DIR && !isdirempty(ip)){
+		iunlockput(ip);
+		goto bad;
+	}
+
+	memset(&de, 0, sizeof(de));
+	if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+		panic("unlink: writei");
+	if(ip->type == T_DIR){
+		dp->nlink--;
+		iupdate(dp);
+	}
+	iunlockput(dp);
+
+	ip->nlink--;
+	iupdate(ip);
+	iunlockput(ip);
+
+	end_op();
+
+	return 0;
+
+	bad:
+		iunlockput(dp);
+		end_op();
+		return -1;
+
+}
+
+
+//return 0 on success
+int
+createSwapFile(struct proc* p)
+{
+
+	char path[DIGITS];
+	memmove(path,"/.swap", 6);
+	itoa(p->pid, path+ 6);
+
+    begin_op();
+    struct inode * in = create(path, T_FILE, 0, 0);
+	iunlock(in);
+
+	p->swapFile = filealloc();
+	if (p->swapFile == 0)
+		panic("no slot for files on /store");
+
+	p->swapFile->ip = in;
+	p->swapFile->type = FD_INODE;
+	p->swapFile->off = 0;
+	p->swapFile->readable = O_WRONLY;
+	p->swapFile->writable = O_RDWR;
+    end_op();
+
+    return 0;
+}
+
+//return as sys_write (-1 when error)
+int
+writeToSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return filewrite(p->swapFile, buffer, size);
+
+}
+
+//return as sys_read (-1 when error)
+int
+readFromSwapFile(struct proc * p, char* buffer, uint placeOnFile, uint size)
+{
+	p->swapFile->off = placeOnFile;
+
+	return fileread(p->swapFile, buffer,  size);
+}
+
diff --git a/fs.c.orig b/fs.c.orig
new file mode 100644
index 0000000..f77275f
--- /dev/null
+++ b/fs.c.orig
@@ -0,0 +1,670 @@
+// File system implementation.  Five layers:
+//   + Blocks: allocator for raw disk blocks.
+//   + Log: crash recovery for multi-step updates.
+//   + Files: inode allocator, reading, writing, metadata.
+//   + Directories: inode with special contents (list of other inodes!)
+//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
+//
+// This file contains the low-level file system manipulation
+// routines.  The (higher-level) system call implementations
+// are in sysfile.c.
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "buf.h"
+#include "file.h"
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+static void itrunc(struct inode*);
+// there should be one superblock per disk device, but we run with
+// only one device
+struct superblock sb; 
+
+// Read the super block.
+void
+readsb(int dev, struct superblock *sb)
+{
+  struct buf *bp;
+
+  bp = bread(dev, 1);
+  memmove(sb, bp->data, sizeof(*sb));
+  brelse(bp);
+}
+
+// Zero a block.
+static void
+bzero(int dev, int bno)
+{
+  struct buf *bp;
+
+  bp = bread(dev, bno);
+  memset(bp->data, 0, BSIZE);
+  log_write(bp);
+  brelse(bp);
+}
+
+// Blocks.
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+        log_write(bp);
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+  log_write(bp);
+  brelse(bp);
+}
+
+// Inodes.
+//
+// An inode describes a single unnamed file.
+// The inode disk structure holds metadata: the file's type,
+// its size, the number of links referring to it, and the
+// list of blocks holding the file's content.
+//
+// The inodes are laid out sequentially on disk at
+// sb.startinode. Each inode has a number, indicating its
+// position on the disk.
+//
+// The kernel keeps a cache of in-use inodes in memory
+// to provide a place for synchronizing access
+// to inodes used by multiple processes. The cached
+// inodes include book-keeping information that is
+// not stored on disk: ip->ref and ip->valid.
+//
+// An inode and its in-memory representation go through a
+// sequence of states before they can be used by the
+// rest of the file system code.
+//
+// * Allocation: an inode is allocated if its type (on disk)
+//   is non-zero. ialloc() allocates, and iput() frees if
+//   the reference and link counts have fallen to zero.
+//
+// * Referencing in cache: an entry in the inode cache
+//   is free if ip->ref is zero. Otherwise ip->ref tracks
+//   the number of in-memory pointers to the entry (open
+//   files and current directories). iget() finds or
+//   creates a cache entry and increments its ref; iput()
+//   decrements ref.
+//
+// * Valid: the information (type, size, &c) in an inode
+//   cache entry is only correct when ip->valid is 1.
+//   ilock() reads the inode from
+//   the disk and sets ip->valid, while iput() clears
+//   ip->valid if ip->ref has fallen to zero.
+//
+// * Locked: file system code may only examine and modify
+//   the information in an inode and its content if it
+//   has first locked the inode.
+//
+// Thus a typical sequence is:
+//   ip = iget(dev, inum)
+//   ilock(ip)
+//   ... examine and modify ip->xxx ...
+//   iunlock(ip)
+//   iput(ip)
+//
+// ilock() is separate from iget() so that system calls can
+// get a long-term reference to an inode (as for an open file)
+// and only lock it for short periods (e.g., in read()).
+// The separation also helps avoid deadlock and races during
+// pathname lookup. iget() increments ip->ref so that the inode
+// stays cached and pointers to it remain valid.
+//
+// Many internal file system functions expect the caller to
+// have locked the inodes involved; this lets callers create
+// multi-step atomic operations.
+//
+// The icache.lock spin-lock protects the allocation of icache
+// entries. Since ip->ref indicates whether an entry is free,
+// and ip->dev and ip->inum indicate which i-node an entry
+// holds, one must hold icache.lock while using any of those fields.
+//
+// An ip->lock sleep-lock protects all ip-> fields other than ref,
+// dev, and inum.  One must hold ip->lock in order to
+// read or write that inode's ip->valid, ip->size, ip->type, &c.
+
+struct {
+  struct spinlock lock;
+  struct inode inode[NINODE];
+} icache;
+
+void
+iinit(int dev)
+{
+  int i = 0;
+  
+  initlock(&icache.lock, "icache");
+  for(i = 0; i < NINODE; i++) {
+    initsleeplock(&icache.inode[i].lock, "inode");
+  }
+
+  readsb(dev, &sb);
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+ inodestart %d bmap start %d\n", sb.size, sb.nblocks,
+          sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
+          sb.bmapstart);
+}
+
+static struct inode* iget(uint dev, uint inum);
+
+//PAGEBREAK!
+// Allocate an inode on device dev.
+// Mark it as allocated by  giving it type type.
+// Returns an unlocked but allocated and referenced inode.
+struct inode*
+ialloc(uint dev, short type)
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum, sb));
+    dip = (struct dinode*)bp->data + inum%IPB;
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+}
+
+// Copy a modified in-memory inode to disk.
+// Must be called after every change to an ip->xxx field
+// that lives on disk, since i-node cache is write-through.
+// Caller must hold ip->lock.
+void
+iupdate(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+  dip->type = ip->type;
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+  log_write(bp);
+  brelse(bp);
+}
+
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+
+  return ip;
+}
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&icache.lock);
+  ip->ref++;
+  release(&icache.lock);
+  return ip;
+}
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    ip->type = dip->type;
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    brelse(bp);
+    ip->valid = 1;
+    if(ip->type == 0)
+      panic("ilock: no type");
+  }
+}
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    panic("iunlock");
+
+  releasesleep(&ip->lock);
+}
+
+// Drop a reference to an in-memory inode.
+// If that was the last reference, the inode cache entry can
+// be recycled.
+// If that was the last reference and the inode has no links
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+  acquiresleep(&ip->lock);
+  if(ip->valid && ip->nlink == 0){
+    acquire(&icache.lock);
+    int r = ip->ref;
+    release(&icache.lock);
+    if(r == 1){
+      // inode has no links and no other references: truncate and free.
+      itrunc(ip);
+      ip->type = 0;
+      iupdate(ip);
+      ip->valid = 0;
+    }
+  }
+  releasesleep(&ip->lock);
+
+  acquire(&icache.lock);
+  ip->ref--;
+  release(&icache.lock);
+}
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+  iput(ip);
+}
+
+//PAGEBREAK!
+// Inode content
+//
+// The content (data) associated with each inode is stored
+// in blocks on the disk. The first NDIRECT block numbers
+// are listed in ip->addrs[].  The next NINDIRECT blocks are
+// listed in block ip->addrs[NDIRECT].
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+
+// Truncate inode (discard contents).
+// Only called when the inode has no links
+// to it (no directory entries referring to it)
+// and has no in-memory reference to it (is
+// not an open file or current directory).
+static void
+itrunc(struct inode *ip)
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    if(ip->addrs[i]){
+      bfree(ip->dev, ip->addrs[i]);
+      ip->addrs[i] = 0;
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+      if(a[j])
+        bfree(ip->dev, a[j]);
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+}
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+  st->dev = ip->dev;
+  st->ino = ip->inum;
+  st->type = ip->type;
+  st->nlink = ip->nlink;
+  st->size = ip->size;
+}
+
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+}
+
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(bp->data + off%BSIZE, src, m);
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+}
+
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+  return strncmp(s, t, DIRSIZ);
+}
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlookup read");
+    if(de.inum == 0)
+      continue;
+    if(namecmp(name, de.name) == 0){
+      // entry matches path element
+      if(poff)
+        *poff = off;
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+
+// Write a new directory entry (name, inum) into the directory dp.
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("dirlink");
+
+  return 0;
+}
+
+//PAGEBREAK!
+// Paths
+
+// Copy the next path element from path into name.
+// Return a pointer to the element following the copied one.
+// The returned path has no leading slashes,
+// so the caller can check *path=='\0' to see if the name is the last one.
+// If no name to remove, return 0.
+//
+// Examples:
+//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
+//   skipelem("///a//bb", name) = "bb", setting name = "a"
+//   skipelem("a", name) = "", setting name = "a"
+//   skipelem("", name) = skipelem("////", name) = 0
+//
+static char*
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+    path++;
+  return path;
+}
+
+// Look up and return the inode for a path name.
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+  return namex(path, 1, name);
+}
diff --git a/mmu.h b/mmu.h
index a82d8e2..aec4420 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,8 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed
+#define PTE_PG          0x200   // Paged out to secondary storage
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/proc.c b/proc.c
index 806b1b1..f9357c8 100644
--- a/proc.c
+++ b/proc.c
@@ -65,6 +65,16 @@ myproc(void) {
   return p;
 }
 
+void initializeSwap(struct proc *p){
+
+  if(isInit(p)==0){
+    int i;
+    for(i=0; i < MAX_FILE_PAGES; i++)
+    p->swapPages[i].isUsed = 0;
+    }
+
+}
+
 //PAGEBREAK: 32
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
@@ -102,6 +112,22 @@ found:
   sp -= sizeof *p->tf;
   p->tf = (struct trapframe*)sp;
 
+  p->memoryQueue.front=0;
+  p->memoryQueue.rear=0;
+  p->pc.pageFaultCount = 0;
+  p->pc.swapFilePagesCount = 0;
+  p->pc.memoryPagesCount = 0;
+  
+  for (int i = 0; i==MAX_PSYC_PAGES ; i++){
+      p->memoryNFU.memoryPages[i].counter = 0;
+    }
+
+  if(isInit(p)==0){
+    createSwapFile(p);
+  }
+    
+	initializeSwap(p);
+
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
@@ -174,6 +200,32 @@ growproc(int n)
   return 0;
 }
 
+void cloneFile(struct proc* src, struct proc* dest){
+  char buffer[PGSIZE];
+  if (isInit(src)==0)
+  {
+    for (int i=0; i < MAX_FILE_PAGES; i++){
+      if (src->swapPages[i].isUsed == 1){
+        if (readFromSwapFile(src, buffer, PGSIZE*i, PGSIZE) != PGSIZE)
+          panic("cloneFile: error in reading from file");
+        
+        int wait = 0;
+        for (uint j = 0; j < PGSIZE; j++)
+        {
+          wait = 0;
+        }
+
+        if (writeToSwapFile(dest, buffer, PGSIZE*i, PGSIZE) != PGSIZE)
+          panic("cloneFile: error in writing to file");
+
+        i+=wait;
+
+        dest->swapPages[i].isUsed = 1;
+      }
+    }
+  }
+}
+
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
@@ -197,6 +249,27 @@ fork(void)
     return -1;
   }
   np->sz = curproc->sz;
+
+  if (isInit(curproc)==0){
+    cloneFile(curproc, np);
+    for (i = 0; ; ){
+      np->memoryQueue.memoryPages[i] = curproc->memoryQueue.memoryPages[i];
+      np->memoryQueue.memoryPages[i].pgdir = np->pgdir;
+      np->memoryNFU.memoryPages[i] = curproc->memoryNFU.memoryPages[i];
+      np->memoryNFU.memoryPages[i].pgdir = np->pgdir;
+      np->memoryNFU.memoryPages[i].counter = 0;
+      i++;
+      if(i==MAX_PSYC_PAGES) break;
+    }
+    for (i = 0; ; ){
+      np->swapPages[i] = curproc->swapPages[i];
+      np->swapPages[i].pgdir = np->pgdir;
+      i++;
+      if(i==MAX_FILE_PAGES) break;
+    }
+  }
+
+
   np->parent = curproc;
   *np->tf = *curproc->tf;
 
@@ -221,6 +294,29 @@ fork(void)
   return pid;
 }
 
+void removeProcFilePages(struct proc* p){
+  p->memoryQueue.front=0;
+	p->memoryQueue.rear=0;
+	p->pc.memoryPagesCount = 0;
+	p->sz = 0;
+  int i;
+	for (i = 0; ; ) {
+		p->memoryQueue.memoryPages[i].isUsed=0;
+		p->memoryQueue.memoryPages[i].virtualAddress=0xffffffff;
+    p->memoryNFU.memoryPages[i].isUsed=0;
+		p->memoryNFU.memoryPages[i].virtualAddress=0xffffffff;
+    p->memoryNFU.memoryPages[i].counter = 0;
+    i++;
+    if(i==MAX_PSYC_PAGES) break;
+	}
+	for (i = 0; ; ) {
+		p->swapPages[i].isUsed=0;
+		p->swapPages[i].virtualAddress=0xffffffff;
+    i++;
+    if(i==MAX_PSYC_PAGES) break;
+	}
+}
+
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
@@ -242,6 +338,12 @@ exit(void)
     }
   }
 
+  if(isInit(curproc)==0){
+    if (removeSwapFile(curproc) != 0)
+      panic("exit: error deleting swap file");
+    removeProcFilePages(curproc);
+  }
+
   begin_op();
   iput(curproc->cwd);
   end_op();
@@ -294,7 +396,7 @@ wait(void)
         p->parent = 0;
         p->name[0] = 0;
         p->killed = 0;
-        p->state = UNUSED;
+        p->state = UNUSED;     
         release(&ptable.lock);
         return pid;
       }
@@ -529,6 +631,85 @@ procdump(void)
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
-    cprintf("\n");
+    cprintf("\nPage Tables:");
+
+    pde_t* curr_pgdir = p->pgdir;
+    
+    cprintf("\n\tmemory location of page directory = %d", *curr_pgdir);
+
+    
+    for (int i = 0; i < 30; i++)
+    {
+      /* Page Directory Traversal */
+
+      pde_t *pde;
+      pte_t *pgtab;
+
+      if(curr_pgdir[i] & PTE_P){
+        pde = &curr_pgdir[i];
+        pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+        uint ppn = curr_pgdir[i] >> 12;
+        uint mem_loc = ppn << 12;
+        cprintf("\n\tpdir PTE  %d, %d", i, ppn);
+        cprintf("\n\t\tmemory location of page table = %d\n", mem_loc);
+
+        // int virtual_pn[1024];
+        // int physical_pn[1024];
+        // int cnt=0;
+
+        for (int j = 0; j < 1024; j++)
+        {
+          /* Page Table Traversal */
+          
+          if((pgtab[j] & PTE_P) && (pgtab[j] & PTE_U)){
+            uint ppn_ptble = pgtab[j] >> 12;
+            uint ppn_mem_loc = ppn_ptble << 12;
+            cprintf("\t\tptbl PTE  %d, %d, %d\n", j, ppn_ptble, ppn_mem_loc);
+            // virtual_pn[cnt] = j;
+            // physical_pn[cnt++] = ppn_ptble;
+          }
+        }
+
+        cprintf("\n\t\tPage mappings:\n");
+
+        // for (int j = 0; j < cnt; j++)
+        // {
+        //   /* Print Mapping */
+        //   cprintf("\n\t\t%d -> %d",virtual_pn[j], physical_pn[j]);
+        // }
+
+        for (int j = 0; j < 1024; j++)
+        {
+          /* Page Table Traversal */
+          
+          if((pgtab[j] & PTE_P) && (pgtab[j] & PTE_U)){
+            uint ppn_ptble = pgtab[j] >> 12;
+            uint ppn_mem_loc = ppn_ptble << 12;
+            cprintf("\t\t%d -> %d\n", ppn_ptble, ppn_mem_loc);
+            // virtual_pn[cnt] = j;
+            // physical_pn[cnt++] = ppn_ptble;
+          }
+        }
+        
+      } 
+
+    }
   }
 }
+
+int
+isInit(struct proc* p){
+  if(!p) return 1;
+  if(p){
+    if(p->pid <= 1){
+      return 1;
+    }
+  }
+	return 0;
+}
+
+
+
+
+
+
diff --git a/proc.h b/proc.h
index 1647114..8e13755 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,7 @@
+#define MAX_PSYC_PAGES 15
+#define MAX_TOTAL_PAGES 30
+#define MAX_FILE_PAGES (MAX_TOTAL_PAGES - MAX_PSYC_PAGES)
+
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -34,6 +38,30 @@ struct context {
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+struct page_t {
+  uint virtualAddress;  
+  pde_t* pgdir;
+  int isUsed;
+  uint counter;
+};
+
+struct pagesCount{
+  uint pageFaultCount;
+  uint memoryPagesCount;       
+  uint swapFilePagesCount;
+};
+
+struct queue{
+  uint front;        
+  uint rear;
+  struct page_t memoryPages[MAX_PSYC_PAGES];
+};
+
+struct nfu{
+  struct page_t memoryPages[MAX_PSYC_PAGES];
+};
+
+
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -49,10 +77,17 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  //Swap file. must initiate with create swap file
+  struct file *swapFile;			//page file
+
+  struct queue memoryQueue;
+  struct nfu memoryNFU;
+  struct page_t swapPages[MAX_FILE_PAGES];
+  struct pagesCount pc;               
 };
 
 // Process memory is laid out contiguously, low addresses first:
 //   text
 //   original data and bss
 //   fixed-size stack
-//   expandable heap
+//   expandable heap
\ No newline at end of file
diff --git a/sysfile.c b/sysfile.c
index bfe61b7..bf3848e 100644
--- a/sysfile.c
+++ b/sysfile.c
@@ -165,7 +165,7 @@ bad:
 }
 
 // Is the directory dp empty except for "." and ".." ?
-static int
+int
 isdirempty(struct inode *dp)
 {
   int off;
@@ -238,7 +238,7 @@ bad:
   return -1;
 }
 
-static struct inode*
+struct inode*
 create(char *path, short type, short major, short minor)
 {
   struct inode *ip, *dp;
diff --git a/sysfile.c.orig b/sysfile.c.orig
new file mode 100644
index 0000000..bfe61b7
--- /dev/null
+++ b/sysfile.c.orig
@@ -0,0 +1,444 @@
+//
+// File-system system calls.
+// Mostly argument checking, since we don't trust
+// user code, and calls into file.c and fs.c.
+//
+
+#include "types.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "mmu.h"
+#include "proc.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+    return -1;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+}
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+
+int
+sys_read(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return fileread(f, p, n);
+}
+
+int
+sys_write(void)
+{
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+  return filewrite(f, p, n);
+}
+
+int
+sys_close(void)
+{
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+int
+sys_fstat(void)
+{
+  struct file *f;
+  struct stat *st;
+
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+    return -1;
+  return filestat(f, st);
+}
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+    return -1;
+
+  begin_op();
+  if((ip = namei(old)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(ip);
+  if(ip->type == T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+  iupdate(ip);
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+  ilock(dp);
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    iunlockput(dp);
+    goto bad;
+  }
+  iunlockput(dp);
+  iput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+}
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+}
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+    return -1;
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(dp);
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+int
+sys_open(void)
+{
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+
+int
+sys_mkdir(void)
+{
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_mknod(void)
+{
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+  if((argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+int
+sys_chdir(void)
+{
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+  
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  if(ip->type != T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = ip;
+  return 0;
+}
+
+int
+sys_exec(void)
+{
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+}
+
+int
+sys_pipe(void)
+{
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+}
diff --git a/test.c b/test.c
new file mode 100644
index 0000000..ba76ecc
--- /dev/null
+++ b/test.c
@@ -0,0 +1,104 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "mmu.h"
+
+void func()
+{
+    char *a;
+    int i=0;
+    int sz;
+    sz = PGSIZE * 17;
+    a = (char *)malloc(sz);
+
+    while(i<sz-1){
+        a[i] = (i % 26) + 'a';
+        i++;
+    }
+    sleep(250);
+    int flag = 1;
+
+    for (i = 0; i < sz - 1; i++)
+    {
+        if (a[i] - 'a' != (i % 26))
+        {
+            wait();
+            printf(2, "Index i = %d , Failed\n", i);
+            flag = 0;
+            break;
+        }
+    }
+    if (flag)
+    {
+        wait();
+        printf(2, "Success!!!\n");
+    }
+    else
+    {
+        wait();
+        printf(2, "Failed!!!\n");
+    }
+    free((void *)a);
+}
+
+int main(int argc, char *argv[])
+{
+    func();
+    
+    int sz;
+    int *a; 
+    int pid;
+    int x;
+    int y;
+    int i;
+    int flag = 1;
+
+    sz = PGSIZE * 15;
+    a = (int *)malloc(sz);
+    pid = fork();
+
+    if (pid != 0)
+    {
+        x = 15;
+        y = 25;
+    }
+    else
+    {
+        x = 11;
+        y = 20;
+    }
+
+    for (i = 0; i < sz / 4; i++)
+    {
+        a[i] = (x ^ i) * y;
+    }
+    sleep(250);
+    
+    for (i = 0; i < sz / 4; i++)
+    {
+        if (a[i] != (x ^ i) * y)
+        {
+            wait();
+            printf(2, "Try2 %d %d %d %d %d\n",x, y, i, (x ^ i) * y, a[i]);
+            flag = 0;
+            break;
+        }
+    }
+    if (flag)
+    {
+        wait();
+        printf(2, "Success!!!\n");
+    }
+    else
+    {
+        wait();
+        printf(2, "Failed!!!\n");
+    }
+    free((void *)a);
+    if (pid != 0)
+    {
+        wait();
+    }
+
+    exit();
+}
\ No newline at end of file
diff --git a/trap.c b/trap.c
index 41c66eb..0d7f9a6 100644
--- a/trap.c
+++ b/trap.c
@@ -48,6 +48,7 @@ trap(struct trapframe *tf)
 
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
+    if(myproc() && NFUPageReplacementAlgo && isInit(myproc())) updateCounters(myproc());
     if(cpuid() == 0){
       acquire(&tickslock);
       ticks++;
@@ -78,6 +79,15 @@ trap(struct trapframe *tf)
     lapiceoi();
     break;
 
+  
+  case T_PGFLT: {
+	  if ((isInit(myproc())==0) && (tf->cs & 3) == 3) {
+      if(PageWasSwapped(myproc(), rcr2()) != 0)
+        if(swapIn(myproc(), rcr2()))
+		      break;
+	  }
+	  
+  }
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
diff --git a/types.h b/types.h
index e4adf64..f8ae272 100644
--- a/types.h
+++ b/types.h
@@ -1,4 +1,4 @@
 typedef unsigned int   uint;
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
-typedef uint pde_t;
+typedef uint pde_t;
\ No newline at end of file
diff --git a/vm.c b/vm.c
index 7134cff..8ca76bb 100644
--- a/vm.c
+++ b/vm.c
@@ -192,6 +192,13 @@ inituvm(pde_t *pgdir, char *init, uint sz)
   memmove(mem, init, sz);
 }
 
+
+
+void updateQueueRear(struct proc *p) {
+  p->memoryQueue.rear = (p->memoryQueue.front + p->pc.memoryPagesCount);
+  p->memoryQueue.rear %=  MAX_PSYC_PAGES;
+}
+
 // Load a program segment into pgdir.  addr must be page-aligned
 // and the pages from addr to addr+sz must already be mapped.
 int
@@ -216,11 +223,50 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
   return 0;
 }
 
+static char buff[PGSIZE];
+
+int nextFreeMemoryPage(struct proc *p) {
+  if(p->pc.memoryPagesCount != MAX_PSYC_PAGES) return p->memoryQueue.rear;
+  return -1;
+}
+
+int nextFreeMemoryPageNFU(struct proc *p){
+  for (uint i = 0; i < MAX_PSYC_PAGES; i++)
+  {
+    if(!p->memoryNFU.memoryPages[i].isUsed) return i;
+  }
+  return -1;
+}
+
+void insertToMemoryNFU(struct proc *p, pde_t *pgdir, uint virtualAddress) {
+
+  int index;
+  index = nextFreeMemoryPageNFU(p);
+  p->pc.memoryPagesCount++;
+  p->memoryNFU.memoryPages[index].isUsed = 1;
+  p->memoryNFU.memoryPages[index].virtualAddress = virtualAddress;
+  p->memoryNFU.memoryPages[index].pgdir = pgdir;
+  p->memoryNFU.memoryPages[index].counter = 0;
+}
+
+void insertToMemory(struct proc *p, pde_t *pgdir, uint virtualAddress) {
+
+  int index;
+  index = nextFreeMemoryPage(p);
+  p->pc.memoryPagesCount++;
+  p->memoryQueue.memoryPages[index].isUsed = 1;
+  p->memoryQueue.memoryPages[index].virtualAddress = virtualAddress;
+  p->memoryQueue.memoryPages[index].pgdir = pgdir;
+  updateQueueRear(p);
+}
+
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 int
 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
+  struct proc* p;
+  p = myproc();
   char *mem;
   uint a;
 
@@ -229,6 +275,13 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   if(newsz < oldsz)
     return oldsz;
 
+  // If number of pages composing newsz exceeds MAX_TOTAL_PAGES and the current proc is NOT init or shell...
+  if (PGROUNDUP(newsz)/PGSIZE > MAX_TOTAL_PAGES) {
+  	if(isInit(p)==0){
+      return 0;
+    }
+  }
+
   a = PGROUNDUP(oldsz);
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
@@ -244,10 +297,75 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       kfree(mem);
       return 0;
     }
+    // If any policy is defined AND current proc is NOT init or shell...
+    if (isInit(p)==0){
+      if(!NFUPageReplacementAlgo){
+        if (p->pc.memoryPagesCount != MAX_PSYC_PAGES) insertToMemory(p, pgdir, a);
+	      else swapOut(p, pgdir, a);
+      }
+	    else{
+        if (p->pc.memoryPagesCount != MAX_PSYC_PAGES) insertToMemoryNFU(p, pgdir, a);
+	      else swapOutNFU(p, pgdir, a);
+      }
+    }
   }
   return newsz;
 }
 
+void reorderQueue(struct proc *p,int from) {
+  if (from < 0)
+    panic("called to organize queue with invalid args");
+  int i = from;
+  
+  for (int nextIdx = (from + 1) % MAX_PSYC_PAGES; ; ) { ;
+    if (p->memoryQueue.memoryPages[i].isUsed == 0) {
+      if(p->memoryQueue.memoryPages[nextIdx].isUsed == 1){
+        p->memoryQueue.memoryPages[i] = p->memoryQueue.memoryPages[nextIdx];
+        p->memoryQueue.memoryPages[nextIdx].isUsed = 0;
+        i = nextIdx;}
+    } 
+    else if (p->memoryQueue.memoryPages[i].isUsed == 1) i = nextIdx;
+
+    nextIdx = (nextIdx + 1) % MAX_PSYC_PAGES;
+    if(nextIdx == p->memoryQueue.rear)break;
+  }
+}
+
+
+void removeFromMemoryNFU(struct proc *p, uint virtualAddress, const pde_t *pgdir){
+
+  if (p){
+    int i;
+    for (i = 0; i < MAX_PSYC_PAGES; i++) {
+      if (p->memoryNFU.memoryPages[i].virtualAddress == virtualAddress)
+          if(p->memoryNFU.memoryPages[i].isUsed == 1)
+            if(p->memoryNFU.memoryPages[i].pgdir == pgdir){
+              p->memoryNFU.memoryPages[i].isUsed = 0;
+              p->memoryNFU.memoryPages[i].counter = 0;
+              p->pc.memoryPagesCount--;
+              return;
+            }
+    }
+  }
+}
+
+void removeFromMemory(struct proc *p, uint virtualAddress, const pde_t *pgdir){
+  if (p){
+    int i;
+    for (i = 0; i < MAX_PSYC_PAGES; i++) {
+      if (p->memoryQueue.memoryPages[i].virtualAddress == virtualAddress)
+          if(p->memoryQueue.memoryPages[i].isUsed == 1)
+            if(p->memoryQueue.memoryPages[i].pgdir == pgdir){
+              p->memoryQueue.memoryPages[i].isUsed = 0;
+              p->pc.memoryPagesCount--;
+              reorderQueue(p, i);
+              updateQueueRear(p);
+              return;
+            }
+    }
+  }
+}
+
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
@@ -257,6 +375,11 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
   pte_t *pte;
   uint a, pa;
+  struct proc* p;
+  p = myproc();
+
+  if(p == 0)
+    return oldsz;
 
   if(newsz >= oldsz)
     return oldsz;
@@ -270,8 +393,14 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       pa = PTE_ADDR(*pte);
       if(pa == 0)
         panic("kfree");
-      char *v = P2V(pa);
+      char *v;
+      int notInitialProcs = (isInit(p)==0);
+      v = P2V(pa);
       kfree(v);
+      if (notInitialProcs){
+        if(!NFUPageReplacementAlgo) removeFromMemory(p, a, pgdir);
+        else removeFromMemoryNFU(p, a, pgdir);
+      }
       *pte = 0;
     }
   }
@@ -310,6 +439,48 @@ clearpteu(pde_t *pgdir, char *uva)
   *pte &= ~PTE_U;
 }
 
+void updateFlags(pte_t *pte, int isOut, int pagePAddr){
+  if(isOut==1){
+    *pte &= ~PTE_P;
+    *pte |= PTE_PG;                      
+    *pte &= PTE_FLAGS(*pte);
+  }
+
+  else if(isOut==0){
+    *pte &= ~PTE_PG;
+    *pte |= PTE_P | PTE_W | PTE_U;                           
+    *pte |= pagePAddr; 
+  }
+}
+
+void updateFlagsMemoryIn(struct proc* p, int virtualAddress, int pagePAddr, pde_t * pgdir){
+
+  pte_t *pte;
+  pte = walkpgdir(pgdir, (int*)virtualAddress, 0);
+
+  if (!pte)
+    panic("updateFlagsMemoryIn: pte does NOT exist in pgdir");
+
+  if (*pte & PTE_P)
+    panic("updateFlagsMemoryIn: page is already in memory!");
+
+  updateFlags(pte, 0, pagePAddr);
+
+  lcr3(V2P(p->pgdir)); //refresh CR3 register
+}
+
+void updateFlagsMemoryOut(struct proc* p, int virtualAddress, pde_t * pgdir){
+
+  pte_t *pte;
+  pte = walkpgdir(pgdir, (int*)virtualAddress, 0);
+  if (!pte)
+    panic("updateFlagsMemoryOut: pte does NOT exist in pgdir");
+
+  updateFlags(pte, 1, 0);
+
+  lcr3(V2P(p->pgdir));      // Refresh CR3 register
+}
+
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
@@ -320,11 +491,19 @@ copyuvm(pde_t *pgdir, uint sz)
   uint pa, i, flags;
   char *mem;
 
+  struct proc* p;
+  p = myproc();
+  if(!p) return 0;
+
   if((d = setupkvm()) == 0)
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
+    if (*pte & PTE_PG){
+      updateFlagsMemoryOut(p, i, d);
+      continue;
+    }
     if(!(*pte & PTE_P))
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
@@ -389,6 +568,301 @@ copyout(pde_t *pgdir, uint va, void *p, uint len)
 // Blank page.
 //PAGEBREAK!
 // Blank page.
-//PAGEBREAK!
-// Blank page.
 
+int nextReplacableMemoryPage(struct proc *p){
+  return p->memoryQueue.front;
+}
+
+int nextReplacableMemoryPageNFU(struct proc *p){
+  uint i, min_ind = 0;
+  for (i = 0; i < MAX_PSYC_PAGES; i++)
+  {
+    if(!p->memoryNFU.memoryPages[i].isUsed) continue;
+    int min = p->memoryNFU.memoryPages[min_ind].counter;
+    int curr = p->memoryNFU.memoryPages[i].counter;
+    if(curr < min) min_ind = i;
+  }
+  return min_ind;
+}
+
+
+uint getPhysicalAddress(int virtualAddress, pde_t *pgdir){
+  pte_t* pte;
+  pte = walkpgdir(pgdir, (int*)virtualAddress, 0);
+  if(!pte){
+    return -1;
+  }
+  return PTE_ADDR(*pte);
+}
+
+
+
+int PageWasSwapped(struct proc *p, int virtualAddress) {
+  int va;
+  va = virtualAddress;
+  pte_t *pte = walkpgdir(p->pgdir, (char *)va, 0);
+  return (*pte & PTE_PG);
+}
+
+void shiftQueue(struct proc *p) {
+  p->memoryQueue.front = (p->memoryQueue.front+1)%MAX_PSYC_PAGES;
+  p->memoryQueue.rear = (p->memoryQueue.rear+1)%MAX_PSYC_PAGES;
+}
+
+int nextFreeSwapPage(struct proc *p) {
+  int i;
+  i=0;
+  while (i < MAX_FILE_PAGES)
+  {
+    if (p->swapPages[i].isUsed == 0)
+      return i;
+    i++;
+  }
+
+  return -1;
+}
+
+int pageToMemoryNFU(struct proc* p, int memoryIndex, uint virtualAddress, char* buff) {
+
+  int ret;
+  ret = -1;
+  int i = 0;
+  uint SwapVirtualAddress;
+  while (i < MAX_FILE_PAGES)
+  {
+    SwapVirtualAddress = p->swapPages[i].virtualAddress;
+    if (SwapVirtualAddress == virtualAddress) {
+      ret = readFromSwapFile(p, buff, i*PGSIZE, PGSIZE);
+      if (ret == -1)
+        break;
+      p->pc.swapFilePagesCount--;
+      p->memoryNFU.memoryPages[memoryIndex] = p->swapPages[i];
+      p->swapPages[i].isUsed = 0;
+      return ret;
+    }
+    i++;
+  }
+  
+  return -1;
+}
+
+int pageToMemory(struct proc* p, int memoryIndex, uint virtualAddress, char* buff) {
+
+  int ret;
+  ret = -1;
+  int i = 0;
+  uint SwapVirtualAddress;
+  while (i < MAX_FILE_PAGES)
+  {
+    SwapVirtualAddress = p->swapPages[i].virtualAddress;
+    if (SwapVirtualAddress == virtualAddress) {
+      ret = readFromSwapFile(p, buff, i*PGSIZE, PGSIZE);
+      if (ret == -1)
+        break;
+      p->pc.swapFilePagesCount--;
+      p->memoryQueue.memoryPages[memoryIndex] = p->swapPages[i];
+      p->swapPages[i].isUsed = 0;
+      return ret;
+    }
+    i++;
+  }
+  
+  return -1;
+}
+
+
+int pageToSwap(struct proc * p, uint virtualAddress, pde_t *pgdir) {
+  
+  int index;
+  index = nextFreeSwapPage(p);
+  
+  if(index==-1) return -1;
+
+  if(writeToSwapFile(p, (char*)virtualAddress, PGSIZE*index, PGSIZE) == -1)
+    return -1;
+  
+  
+  p->swapPages[index].isUsed = 1;
+  p->pc.swapFilePagesCount++;
+  p->swapPages[index].virtualAddress = virtualAddress;
+  p->swapPages[index].pgdir = pgdir;
+  
+  
+
+  return index;
+}
+
+void swapOutNFU(struct proc *p, pde_t *pgdir, uint virtualAddress){
+
+  // Get the page index to replace according to replacement algorithm
+  int replace_index;
+  struct page_t swappedPage;
+  uint pagePhysicalAddress;
+  char *va;
+  replace_index = nextReplacableMemoryPageNFU(p);
+  swappedPage = p->memoryNFU.memoryPages[replace_index];
+  pagePhysicalAddress = getPhysicalAddress(p->memoryNFU.memoryPages[replace_index].virtualAddress, p->memoryNFU.memoryPages[replace_index].pgdir);
+  va = (char*)P2V(pagePhysicalAddress);
+
+  // write the selected page from memory to swap and free that page in memory
+  pageToSwap(p, p->memoryNFU.memoryPages[replace_index].virtualAddress, p->memoryNFU.memoryPages[replace_index].pgdir);
+
+  kfree(va);
+  // Update Flags in memory
+  updateFlagsMemoryOut(p, swappedPage.virtualAddress, swappedPage.pgdir);
+
+  // states and counter update
+  p->memoryNFU.memoryPages[replace_index].isUsed = 0;
+  p->pc.memoryPagesCount--;
+
+  // Finds queue rear and inserts new page there
+  insertToMemoryNFU(p, pgdir, virtualAddress);
+}
+
+
+void swapOut(struct proc *p, pde_t *pgdir, uint virtualAddress){
+
+  // Get the page index to replace according to replacement algorithm
+  int replace_index;
+  struct page_t swappedPage;
+  uint pagePhysicalAddress;
+  char *va;
+  replace_index = nextReplacableMemoryPage(p);
+  swappedPage = p->memoryQueue.memoryPages[replace_index];
+  pagePhysicalAddress = getPhysicalAddress(p->memoryQueue.memoryPages[replace_index].virtualAddress, p->memoryQueue.memoryPages[replace_index].pgdir);
+  va = (char*)P2V(pagePhysicalAddress);
+
+  // write the selected page from memory to swap and free that page in memory
+  pageToSwap(p, p->memoryQueue.memoryPages[replace_index].virtualAddress, p->memoryQueue.memoryPages[replace_index].pgdir);
+
+  kfree(va);
+  // Update Flags in memory
+  updateFlagsMemoryOut(p, swappedPage.virtualAddress, swappedPage.pgdir);
+
+  // states and counter update
+  p->memoryQueue.memoryPages[replace_index].isUsed = 0;
+  p->pc.memoryPagesCount--;
+
+  // Finds queue rear and inserts new page there
+  insertToMemory(p, pgdir, virtualAddress);
+  shiftQueue(p);
+}
+
+
+int swapIn(struct proc* p, int page_index){
+  if(!NFUPageReplacementAlgo){
+    // This function is called from trap when page fault occurs
+    p->pc.pageFaultCount++;
+
+    //Allocating space for new page
+    char* new_allocated_page = kalloc();
+    memset(new_allocated_page, 0, PGSIZE);
+    lcr3(V2P(p->pgdir));
+    int AvailableMemoryIndex = nextFreeMemoryPage(p);
+    
+
+    uint virtualAddress = PGROUNDDOWN(page_index);
+    // If there is available space in ram no need to swap out
+    if (AvailableMemoryIndex >= 0) {
+      cprintf("Free index FIFO= %d\n",AvailableMemoryIndex);
+      updateFlagsMemoryIn(p, virtualAddress, V2P(new_allocated_page), p->pgdir);
+      pageToMemory(p, AvailableMemoryIndex, virtualAddress, (char*)virtualAddress);
+      return 1;
+    }
+
+
+    //Swapping-out is needed, Much like swapout
+    // Find the available page space in swapfile and return its index in array
+    struct page_t outPage;
+    int outPagePAddr;
+    char *v;
+
+    AvailableMemoryIndex = nextReplacableMemoryPage(p);
+    outPage = p->memoryQueue.memoryPages[AvailableMemoryIndex];
+    outPagePAddr = getPhysicalAddress(outPage.virtualAddress, outPage.pgdir);
+    v = (char*)P2V(outPagePAddr);
+
+    cprintf("Replacable index FIFO= %d\n",AvailableMemoryIndex);
+    updateFlagsMemoryIn(p, virtualAddress, V2P(new_allocated_page), p->pgdir);
+    pageToMemory(p, AvailableMemoryIndex, virtualAddress, buff);
+
+    memmove(new_allocated_page, buff, PGSIZE);
+
+    pageToSwap(p, outPage.virtualAddress, outPage.pgdir);
+    updateFlagsMemoryOut(p, outPage.virtualAddress, outPage.pgdir);
+
+    kfree(v);
+    shiftQueue(p);
+    return 1;
+    }
+
+  else
+  {
+    // This function is called from trap when page fault occurs
+    p->pc.pageFaultCount++;
+
+    //Allocating space for new page
+    char* new_allocated_page = kalloc();
+    memset(new_allocated_page, 0, PGSIZE);
+    lcr3(V2P(p->pgdir));
+    int AvailableMemoryIndex = nextFreeMemoryPageNFU(p);
+    
+
+    uint virtualAddress = PGROUNDDOWN(page_index);
+    // If there is available space in ram no need to swap out
+    if (AvailableMemoryIndex >= 0) {
+      cprintf("Free index NFU= %d\n",AvailableMemoryIndex);
+      updateFlagsMemoryIn(p, virtualAddress, V2P(new_allocated_page), p->pgdir);
+      pageToMemoryNFU(p, AvailableMemoryIndex, virtualAddress, (char*)virtualAddress);
+      return 1;
+    }
+
+
+    //Swapping-out is needed, Much like swapout
+    // Find the available page space in swapfile and return its index in array
+    struct page_t outPage;
+    int outPagePAddr;
+    char *v;
+
+    AvailableMemoryIndex = nextReplacableMemoryPageNFU(p);
+    outPage = p->memoryNFU.memoryPages[AvailableMemoryIndex];
+    outPagePAddr = getPhysicalAddress(outPage.virtualAddress, outPage.pgdir);
+    v = (char*)P2V(outPagePAddr);
+
+    cprintf("Replacable index NFU= %d\n",AvailableMemoryIndex);
+    updateFlagsMemoryIn(p, virtualAddress, V2P(new_allocated_page), p->pgdir);
+    pageToMemoryNFU(p, AvailableMemoryIndex, virtualAddress, buff);
+
+    memmove(new_allocated_page, buff, PGSIZE);
+
+    pageToSwap(p, outPage.virtualAddress, outPage.pgdir);
+    updateFlagsMemoryOut(p, outPage.virtualAddress, outPage.pgdir);
+
+    kfree(v);
+    return 1;
+  }
+  
+}
+
+void updateCounters(struct proc* p){
+  if(!NFUPageReplacementAlgo) panic("Wrong algo");
+
+  for (uint i = 0; i < MAX_PSYC_PAGES; i++)
+  {
+    if(!p->memoryNFU.memoryPages[i].isUsed) continue;
+    uint virtualAddress = p->memoryNFU.memoryPages[i].virtualAddress;
+    pte_t* pte = walkpgdir(p->memoryNFU.memoryPages[i].pgdir, (char*) virtualAddress, 0);
+    
+    if(!pte) panic("NULL");
+    if (*pte & PTE_PG){
+      p->memoryNFU.memoryPages[i].counter=0;
+      continue;
+    }
+    if (*pte & PTE_A){
+       p->memoryNFU.memoryPages[i].counter++;
+       *pte &= ~PTE_A;
+    }
+    lcr3(V2P(p->pgdir));    
+  }
+  
+}
\ No newline at end of file
